(* goals.sml
 *
 * Final Project Goals
 *
 * Steve Barrus
 * CS 6110
 *)

(* Netlist equivalence proof for a 16-bit Ladner-Fischer adder circuit 
   and a 16-bit ripple carry adder *)

g `RIPPLE_ADD16(A_0,A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,A_12,A_13,
   A_14,A_15,B_0,B_1,B_2,B_3,B_4,B_5,B_6,B_7,B_8,B_9,B_10,B_11,B_12,B_13,
   B_14,B_15,Cin,Cout,S_0,S_1,S_2,S_3,S_4,S_5,S_6,S_7,S_8,S_9,S_10,S_11,
   S_12,S_13,S_14,S_15) = LadnerFischer16(A_0,A_1,A_2,A_3,A_4,A_5,A_6,A_7,
   A_8,A_9,A_10,A_11,A_12,A_13,A_14,A_15,B_0,B_1,B_2,B_3,B_4,B_5,B_6,B_7,
   B_8,B_9,B_10,B_11,B_12,B_13,B_14,B_15,Cin,Cout,S_0,S_1,S_2,S_3,S_4,S_5,S_6,
   S_7,S_8,S_9,S_10,S_11,S_12,S_13,S_14,S_15)`;

e (REWRITE_TAC [LADNER_FISCHER16_DEF] THEN EQ_TAC 
   THENL [REWRITE_TAC [GRAY_DEF,BLACK_DEF,GRAY_DEF,PG16_DEF,XOR16_DEF,
       BLACK_STR_BEH_EQ,BLACK_BEH_DEF,XOR_STR_BEH_EQ,XOR_BEH_DEF,AND_STR_BEH_EQ,
       AND_BEH_DEF,GRAY_STR_BEH_EQ,GRAY_BEH_DEF] THEN SIMP_TAC std_ss [] 
       THEN REWRITE_TAC [RIPPLE_ADD16_DEF,FULLADDER_STR_SIM_EQ,FULLADDER_SIM_DEF] 
       THEN CONV_TAC (REPEATC (ONCE_DEPTH_CONV LEFT_IMP_EXISTS_CONV)) 
       THEN REPEAT GEN_TAC THEN MY_SAT_TAC zchaff,
   REWRITE_TAC [RIPPLE_ADD16_DEF,FULLADDER_STR_SIM_EQ,FULLADDER_SIM_DEF,
       GRAY_DEF,BLACK_DEF,GRAY_DEF,PG16_DEF,XOR16_DEF,BLACK_STR_BEH_EQ,
       BLACK_BEH_DEF,XOR_STR_BEH_EQ,XOR_BEH_DEF, AND_STR_BEH_EQ,AND_BEH_DEF,
       GRAY_STR_BEH_EQ,GRAY_BEH_DEF] THEN REPEAT STRIP_TAC THEN 
       MAP_EVERY Q.EXISTS_TAC [`r2c1`,`r7c2`,`r3c3`,`r7c4`,`r4c5`,`r7c6`,`r4c7`,
           `r7c8`,`r5c9`,`r7c10`,`r5c11`,`r7c12`,`r5c13`,`r7c14`,`r5c15`] 
       THEN REPEAT STRIP_TAC THEN METIS_TAC []]);

(* Netlist equivalence proof for a 16-bit Brent-Kung adder circuit 
   and a 16-bit ripple carry adder *)

g `RIPPLE_ADD16(A_0,A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,A_12,A_13,
   A_14,A_15,B_0,B_1,B_2,B_3,B_4,B_5,B_6,B_7,B_8,B_9,B_10,B_11,B_12,B_13,B_14,
   B_15,Cin,Cout,S_0,S_1,S_2,S_3,S_4,S_5,S_6,S_7,S_8,S_9,S_10,S_11,S_12,S_13,
   S_14,S_15) = BrentKung16(A_0,A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,
   A_12,A_13,A_14,A_15,B_0,B_1,B_2,B_3,B_4,B_5,B_6,B_7,B_8,B_9,B_10,B_11,B_12,
   B_13,B_14,B_15,Cin,Cout,S_0,S_1,S_2,S_3,S_4,S_5,S_6,S_7,S_8,S_9,S_10,S_11,
   S_12,S_13,S_14,S_15)`;

e (REWRITE_TAC [BRENT_KUNG16_DEF] THEN EQ_TAC 
   THENL [REWRITE_TAC [GRAY_DEF,BLACK_DEF,GRAY_DEF,PG16_DEF,XOR16_DEF,
       BLACK_STR_BEH_EQ,BLACK_BEH_DEF,XOR_STR_BEH_EQ,XOR_BEH_DEF,AND_STR_BEH_EQ,
       AND_BEH_DEF,GRAY_STR_BEH_EQ,GRAY_BEH_DEF] THEN SIMP_TAC std_ss [] 
       THEN REWRITE_TAC [RIPPLE_ADD16_DEF,FULLADDER_STR_SIM_EQ,FULLADDER_SIM_DEF] 
       THEN CONV_TAC (REPEATC (ONCE_DEPTH_CONV LEFT_IMP_EXISTS_CONV)) 
       THEN REPEAT GEN_TAC THEN MY_SAT_TAC zchaff,
   REWRITE_TAC [RIPPLE_ADD16_DEF,FULLADDER_STR_SIM_EQ,FULLADDER_SIM_DEF,
       GRAY_DEF,BLACK_DEF,GRAY_DEF,PG16_DEF,XOR16_DEF,BLACK_STR_BEH_EQ,
       BLACK_BEH_DEF,XOR_STR_BEH_EQ,XOR_BEH_DEF, AND_STR_BEH_EQ,AND_BEH_DEF,
       GRAY_STR_BEH_EQ,GRAY_BEH_DEF] THEN REPEAT STRIP_TAC THEN 
       MAP_EVERY Q.EXISTS_TAC [`r2c1`,`r9c2`,`r3c3`,`r9c4`,`r8c5`,`r9c6`,`r4c7`,
           `r9c8`,`r8c9`,`r9c10`,`r7c11`,`r9c12`,`r8c13`,`r9c14`,`r5c15`] 
       THEN REPEAT STRIP_TAC THEN METIS_TAC []]);

(* Netlist equivalence proof for a 32-bit Ladner-Fischer adder circuit 
   and a 32-bit ripple carry adder.  NOTE: this takes a long time and a 
   lot of CPU power to prove. *)

g `RIPPLE_ADD32(A_0,A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,A_12,A_13,
   A_14,A_15,A_16,A_17,A_18,A_19,A_20,A_21,A_22,A_23,A_24,A_25,A_26,A_27,A_28,
   A_29,A_30,A_31,B_0,B_1,B_2,B_3,B_4,B_5,B_6,B_7,B_8,B_9,B_10,B_11,B_12,B_13,
   B_14,B_15,B_16,B_17,B_18,B_19,B_20,B_21,B_22,B_23,B_24,B_25,B_26,B_27,B_28,
   B_29,B_30,B_31,Cin,Cout,S_0,S_1,S_2,S_3,S_4,S_5,S_6,S_7,S_8,S_9,S_10,S_11,
   S_12,S_13,S_14,S_15,S_16,S_17,S_18,S_19,S_20,S_21,S_22,S_23,S_24,S_25,S_26,
   S_27,S_28,S_29,S_30,S_31) = LadnerFischer32(A_0,A_1,A_2,A_3,A_4,A_5,A_6,A_7,
   A_8,A_9,A_10,A_11,A_12,A_13,A_14,A_15,A_16,A_17,A_18,A_19,A_20,A_21,A_22,
   A_23,A_24,A_25,A_26,A_27,A_28,A_29,A_30,A_31,B_0,B_1,B_2,B_3,B_4,B_5,B_6,B_7,
   B_8,B_9,B_10,B_11,B_12,B_13,B_14,B_15,B_16,B_17,B_18,B_19,B_20,B_21,B_22,
   B_23,B_24,B_25,B_26,B_27,B_28,B_29,B_30,B_31,Cin,Cout,S_0,S_1,S_2,S_3,S_4,
   S_5,S_6,S_7,S_8,S_9,S_10,S_11,S_12,S_13,S_14,S_15,S_16,S_17,S_18,S_19,S_20,
   S_21,S_22,S_23,S_24,S_25,S_26,S_27,S_28,S_29,S_30,S_31)`;

e (REWRITE_TAC [LADNER_FISCHER32_DEF] THEN EQ_TAC 
   THENL [REWRITE_TAC [GRAY_DEF,BLACK_DEF,GRAY_DEF,PG32_DEF,XOR32_DEF,
       BLACK_STR_BEH_EQ,BLACK_BEH_DEF,XOR_STR_BEH_EQ,XOR_BEH_DEF,AND_STR_BEH_EQ,
       AND_BEH_DEF,GRAY_STR_BEH_EQ,GRAY_BEH_DEF] THEN SIMP_TAC std_ss [] 
       THEN REWRITE_TAC [RIPPLE_ADD32_DEF,FULLADDER_STR_SIM_EQ,FULLADDER_SIM_DEF] 
       THEN CONV_TAC (REPEATC (ONCE_DEPTH_CONV LEFT_IMP_EXISTS_CONV)) 
       THEN REPEAT GEN_TAC THEN MY_SAT_TAC zchaff,
   REWRITE_TAC [RIPPLE_ADD32_DEF,FULLADDER_STR_SIM_EQ,FULLADDER_SIM_DEF,
       GRAY_DEF,BLACK_DEF,GRAY_DEF,PG32_DEF,XOR32_DEF,BLACK_STR_BEH_EQ,
       BLACK_BEH_DEF,XOR_STR_BEH_EQ,XOR_BEH_DEF, AND_STR_BEH_EQ,AND_BEH_DEF,
       GRAY_STR_BEH_EQ,GRAY_BEH_DEF] THEN REPEAT STRIP_TAC THEN 
       MAP_EVERY Q.EXISTS_TAC [`r2c1`,`r7c2`,`r3c3`,`r7c4`,`r4c5`,`r7c6`,`r4c7`,
           `r7c8`,`r5c9`,`r7c10`,`r5c11`,`r7c12`,`r5c13`,`r7c14`,`r5c15`,
           `r7c16`,`r6c17`,`r7c18`,`r6c19`,`r7c20`,`r6c21`,`r7c22`,`r6c23`,
           `r7c24`,`r6c25`,`r7c26`,`r6c27`,`r7c28`,`r6c29`,`r7c30`,`r6c31`] 
       THEN REPEAT STRIP_TAC THEN METIS_TAC []]);

(* Netlist equivalence proof for a 32-bit Brent-Kung adder circuit 
   and a 32-bit ripple carry adder.  NOTE: this takes a long time and
   a lot of CPU power to prove. *)

g `RIPPLE_ADD32(A_0,A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,A_12,A_13,
   A_14,A_15,A_16,A_17,A_18,A_19,A_20,A_21,A_22,A_23,A_24,A_25,A_26,A_27,A_28,
   A_29,A_30,A_31,B_0,B_1,B_2,B_3,B_4,B_5,B_6,B_7,B_8,B_9,B_10,B_11,B_12,B_13,
   B_14,B_15,B_16,B_17,B_18,B_19,B_20,B_21,B_22,B_23,B_24,B_25,B_26,B_27,B_28,
   B_29,B_30,B_31,Cin,Cout,S_0,S_1,S_2,S_3,S_4,S_5,S_6,S_7,S_8,S_9,S_10,S_11,
   S_12,S_13,S_14,S_15,S_16,S_17,S_18,S_19,S_20,S_21,S_22,S_23,S_24,S_25,S_26,
   S_27,S_28,S_29,S_30,S_31) = BrentKung32(A_0,A_1,A_2,A_3,A_4,A_5,A_6,A_7,
   A_8,A_9,A_10,A_11,A_12,A_13,A_14,A_15,A_16,A_17,A_18,A_19,A_20,A_21,A_22,
   A_23,A_24,A_25,A_26,A_27,A_28,A_29,A_30,A_31,B_0,B_1,B_2,B_3,B_4,B_5,B_6,B_7,
   B_8,B_9,B_10,B_11,B_12,B_13,B_14,B_15,B_16,B_17,B_18,B_19,B_20,B_21,B_22,
   B_23,B_24,B_25,B_26,B_27,B_28,B_29,B_30,B_31,Cin,Cout,S_0,S_1,S_2,S_3,S_4,
   S_5,S_6,S_7,S_8,S_9,S_10,S_11,S_12,S_13,S_14,S_15,S_16,S_17,S_18,S_19,S_20,
   S_21,S_22,S_23,S_24,S_25,S_26,S_27,S_28,S_29,S_30,S_31)`;

e (REWRITE_TAC [BRENT_KUNG32_DEF] THEN EQ_TAC 
   THENL [REWRITE_TAC [GRAY_DEF,BLACK_DEF,GRAY_DEF,PG32_DEF,XOR32_DEF,
       BLACK_STR_BEH_EQ,BLACK_BEH_DEF,XOR_STR_BEH_EQ,XOR_BEH_DEF,AND_STR_BEH_EQ,
       AND_BEH_DEF,GRAY_STR_BEH_EQ,GRAY_BEH_DEF] THEN SIMP_TAC std_ss [] 
       THEN REWRITE_TAC [RIPPLE_ADD32_DEF,FULLADDER_STR_SIM_EQ,FULLADDER_SIM_DEF] 
       THEN CONV_TAC (REPEATC (ONCE_DEPTH_CONV LEFT_IMP_EXISTS_CONV)) 
       THEN REPEAT GEN_TAC THEN MY_SAT_TAC zchaff,
   REWRITE_TAC [RIPPLE_ADD32_DEF,FULLADDER_STR_SIM_EQ,FULLADDER_SIM_DEF,
       GRAY_DEF,BLACK_DEF,GRAY_DEF,PG32_DEF,XOR32_DEF,BLACK_STR_BEH_EQ,
       BLACK_BEH_DEF,XOR_STR_BEH_EQ,XOR_BEH_DEF, AND_STR_BEH_EQ,AND_BEH_DEF,
       GRAY_STR_BEH_EQ,GRAY_BEH_DEF] THEN REPEAT STRIP_TAC THEN 
       MAP_EVERY Q.EXISTS_TAC [`r2c1`,`r9c2`,`r3c3`,`r9c4`,`r8c5`,`r9c6`,`r4c7`,
           `r9c8`,`r8c9`,`r9c10`,`r7c11`,`r9c12`,`r8c13`,`r9c14`,`r5c15`,
           `r9c16`,`r8c17`,`r9c18`,`r7c19`,`r9c20`,`r8c21`,`r9c22`,`r6c23`,
           `r9c24`,`r8c25`,`r9c26`,`r7c27`,`r9c28`,`r8c29`,`r9c30`,`r6c31`]
       THEN REPEAT STRIP_TAC THEN METIS_TAC []]);

